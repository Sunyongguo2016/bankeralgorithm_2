判断t0时刻的安全性：
-----安全性算法执行：-----
进程1获得资源，可顺利执行，直至完成，并释放资源	 Work+Allocation:5   3   2   
进程3获得资源，可顺利执行，直至完成，并释放资源	 Work+Allocation:7   4   3   
进程4获得资源，可顺利执行，直至完成，并释放资源	 Work+Allocation:7   4   5   
进程0获得资源，可顺利执行，直至完成，并释放资源	 Work+Allocation:7   5   5   
进程2获得资源，可顺利执行，直至完成，并释放资源	 Work+Allocation:10   5   7   
t0时刻是安全的
/*************************************************************/
进程1执行请求：银行家算法运行
request:    1   0   2   
need1:      1   2   2   
request<=need
request:    1   0   2   
available:  3   3   2   
request<=available
-----安全性算法执行：-----
进程1获得资源，可顺利执行，直至完成，并释放资源	 Work+Allocation:5   3   2   
进程3获得资源，可顺利执行，直至完成，并释放资源	 Work+Allocation:7   4   3   
进程4获得资源，可顺利执行，直至完成，并释放资源	 Work+Allocation:7   4   5   
进程0获得资源，可顺利执行，直至完成，并释放资源	 Work+Allocation:7   5   5   
进程2获得资源，可顺利执行，直至完成，并释放资源	 Work+Allocation:10   5   7   
此次资源分配后，系统处于安全状态，允许请求，将资源分配给1进程
此时的available：
2   3   0   
/*************************************************************/
进程4执行请求：银行家算法运行
request:    3   3   0   
need4:      4   3   1   
request<=need
request:    3   3   0   
available:  2   3   0   
request>available
尚无足够资源，进程4等待 (wait)
/*************************************************************/
进程0执行请求：银行家算法运行
request:    0   2   0   
need0:      7   4   3   
request<=need
request:    0   2   0   
available:  2   3   0   
request<=available
-----安全性算法执行：-----
此次资源分配后，系统处于不安全状态，不允许请求，此次分配作废，资源不会分配给0进程
0进程处于等待状态！
此时的available：
2   3   0   
/*************************************************************/
如果银行家算法中吧p0发出的向量请求改为request(0,1,0)
进程0执行请求：银行家算法运行
request:    0   1   0   
need0:      7   4   3   
request<=need
request:    0   1   0   
available:  2   3   0   
request<=available
-----安全性算法执行：-----
进程1获得资源，可顺利执行，直至完成，并释放资源	 Work+Allocation:5   2   2   
进程3获得资源，可顺利执行，直至完成，并释放资源	 Work+Allocation:7   3   3   
进程4获得资源，可顺利执行，直至完成，并释放资源	 Work+Allocation:7   3   5   
进程0获得资源，可顺利执行，直至完成，并释放资源	 Work+Allocation:7   5   5   
进程2获得资源，可顺利执行，直至完成，并释放资源	 Work+Allocation:10   5   7   
此次资源分配后，系统处于安全状态，允许请求，将资源分配给0进程
此时的available：
2   2   0   
